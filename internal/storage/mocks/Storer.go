// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/erknas/forum/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// Storer is an autogenerated mock type for the Storer type
type Storer struct {
	mock.Mock
}

// CreateComment provides a mock function with given fields: _a0, _a1
func (_m *Storer) CreateComment(_a0 context.Context, _a1 model.CustomCommentInput) (model.CustomComment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 model.CustomComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CustomCommentInput) (model.CustomComment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.CustomCommentInput) model.CustomComment); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.CustomComment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.CustomCommentInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePost provides a mock function with given fields: _a0, _a1
func (_m *Storer) CreatePost(_a0 context.Context, _a1 model.PostInput) (model.CustomPost, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreatePost")
	}

	var r0 model.CustomPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PostInput) (model.CustomPost, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PostInput) model.CustomPost); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.CustomPost)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PostInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentReplies provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetCommentReplies(_a0 context.Context, _a1 int) ([]model.CustomComment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentReplies")
	}

	var r0 []model.CustomComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]model.CustomComment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []model.CustomComment); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CustomComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommentsByPost provides a mock function with given fields: _a0, _a1, _a2, _a3
func (_m *Storer) GetCommentsByPost(_a0 context.Context, _a1 int, _a2 int, _a3 int) ([]model.CustomComment, error) {
	ret := _m.Called(_a0, _a1, _a2, _a3)

	if len(ret) == 0 {
		panic("no return value specified for GetCommentsByPost")
	}

	var r0 []model.CustomComment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) ([]model.CustomComment, error)); ok {
		return rf(_a0, _a1, _a2, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int, int) []model.CustomComment); ok {
		r0 = rf(_a0, _a1, _a2, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CustomComment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int, int) error); ok {
		r1 = rf(_a0, _a1, _a2, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPostByID provides a mock function with given fields: _a0, _a1
func (_m *Storer) GetPostByID(_a0 context.Context, _a1 int) (model.CustomPost, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetPostByID")
	}

	var r0 model.CustomPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (model.CustomPost, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) model.CustomPost); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.CustomPost)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPosts provides a mock function with given fields: _a0
func (_m *Storer) GetPosts(_a0 context.Context) ([]model.CustomPost, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GetPosts")
	}

	var r0 []model.CustomPost
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]model.CustomPost, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []model.CustomPost); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.CustomPost)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewStorer creates a new instance of Storer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storer {
	mock := &Storer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
