// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	model "github.com/erknas/forum/graph/model"
	mock "github.com/stretchr/testify/mock"
)

// Subscriber is an autogenerated mock type for the Subscriber type
type Subscriber struct {
	mock.Mock
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *Subscriber) Publish(_a0 string, _a1 *model.Comment) {
	_m.Called(_a0, _a1)
}

// Subscribe provides a mock function with given fields: _a0
func (_m *Subscriber) Subscribe(_a0 string) chan *model.Comment {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 chan *model.Comment
	if rf, ok := ret.Get(0).(func(string) chan *model.Comment); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *model.Comment)
		}
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: _a0, _a1
func (_m *Subscriber) Unsubscribe(_a0 string, _a1 chan *model.Comment) {
	_m.Called(_a0, _a1)
}

// NewSubscriber creates a new instance of Subscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscriber {
	mock := &Subscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
